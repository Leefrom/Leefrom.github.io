<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[script、noscript以及文档模式]]></title>
    <url>%2F2018%2F03%2F20%2Fscript-%E3%80%81-noscript-%E4%BB%A5%E5%8F%8A%E6%96%87%E6%A1%A3%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[&lt;script&gt;&lt;script&gt;下列的几个我经常见的属性： async表示应该立即下载脚本，但不妨碍页面中的其他操作，比如下载其他资源或等待加载其他脚本，只对外部脚本文件有效。[异步]异步脚本一定会再页面的load事件前执行，但可能会在DOMContentLoaded事件触发之前或之后执行。 defer表示脚本可以延迟到文档完全被解析和显示之后再执行。[延迟] 放在head标签里面的时候加上defer属性脚本会立即下载，但延迟执行。 type表示编写代码使用的脚本语言的内容类型（MIME类型），type值默认为text/javascript，但是服务器在传输过程中使用的MIME类型通常是application/x-javascript,type不设置为这个值是因为设置这个值可能导致脚本被忽略。 在使用&lt;script&gt;解析嵌入代码的时候不要在任何地方出现&lt;/script&gt;,会认为是结束的标志，若有需要使用转义字符\来解决这个问题。 &emsp;&emsp;在引入外部js文件的时候是&lt;script type=&quot;text/javascript&quot; src=&quot;xx.js&quot;&gt;，如果在引入外部js文件的同时包含嵌入的代码，嵌入的代码会被忽略只会下载并执行外部脚本文件。引入外部文件浏览器会根据具体的设置来缓存链接的所有外部文件，如果有两个页面都使用同一个文件，那么这个文件只需下载一次，最终结果能够加快页面的加载速度。 &emsp;&emsp;通过src属性还可以包含来自外部域的javascript文件，与img相同，可以指向当前HTML页面所在域之外的某个域中的完整URL。 &emsp;&emsp;无论如何包含代码。只要不存在defer和async属性，浏览器都会按照&lt;script&gt;元素在页面出现的先后顺序对他们依次进行解析。defer会按照前后顺序执行，但标记async的脚本并不保证按照他们的先后顺序执行。 &lt;noscript&gt;&emsp;&emsp;&lt;noscript&gt;是在浏览器不支持js脚本的时候会显示出来。12345&lt;body&gt; &lt;noscript&gt; &lt;p&gt;本页面需要浏览器支持Javascript&lt;/p&gt; &lt;/noscript&gt; &lt;/body&gt; 文档模式&emsp;&emsp;文档模式是通过文档类型Doctype切换来实现的，最初的两种文档模式是混杂模式和标准模式。 &emsp;&emsp;如果在文档的开始处没有发现文档类型声明，则所有的浏览器会默认开启混杂模式，但是不同浏览器咋这种模式下的行为差异非常大。&emsp;&emsp;而标准模式会让浏览器的行为更接近标准行为，准标准模式与标准模式差别不大。]]></content>
      <tags>
        <tag>Javascript</tag>
        <tag>script</tag>
        <tag>文档模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Javascript=ECMAScript+DOM+BOM]]></title>
    <url>%2F2018%2F03%2F16%2FDOM%2F</url>
    <content type="text"><![CDATA[DOM(Document Object Model)将整个页面映射为一个多层节点结构，借助DOM提供的API可以自如的删除、添加、替换或修改任何节点。 DOM1级主要是映射文档结构。 DOM2级扩充了鼠标和用户界面事件、范围、遍历等细分模块，而且通过对象接口增加了对CSS的支持。DOM2级引入了下列新模块，也给出了众多新类型和新接口的定义。 DOM视图(Views)：跟踪不同文档视图的接口（e.g.应用css之前后和之后的文档） DOM事件(Events)：定义了事件和事件处理的接口 DOM样式(Style)：定义了基于CSS为元素应用样式的接口 DOM遍历和范围(Traversal and Range)：定义了遍历和操作文档树的接口 DOM3引入了以统一方式加载和保存文档的方法(DOM Load and Save)，新增了验证文档的方法(DOM Validation)。 BOM(Browser Object Model)可以控制浏览器显示页面以外的部分,处理浏览器窗口和框架，支持访问和操作浏览器窗口。在HTML5中把很多BOM功能写入了正式规范。人们习惯上也把所有针对浏览器的Javascript扩展算作BOM的一部分。 弹出新浏览器窗口的功能 移动、缩放和关闭浏览器窗口的功能 提供浏览器详细信息的navigator对象 提供浏览器所加载页面的详细信息的location对象 提供用户显示器分辨率详细信息的screen对象 对cookies的支持 像XMLHttpRequest和IE的ActiveXObject这样的自定义对象 Js由以下三个不同的部分组成： ECMAScript提供核心语言功能 DOM文档对象模型提供访问和操作页面内容的方法和接口 BOM浏览器对象模型提供与浏览器交互的方法与接口各浏览器的支持情况在ES上面大致相同，但是在DOM和BOM在共同特性上虽然一致但是还是会有差异。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>DOM</tag>
        <tag>BOM</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+github+next主题更换+个人终端更换]]></title>
    <url>%2F2018%2F03%2F15%2Fabout-hexo%2F</url>
    <content type="text"><![CDATA[hexo+github+域名 hexo的部署前期我是看的这篇博客hexo+github搭建个人博客(超详细教程)，博主写的很详细了。总结下来就是： 首先安装git，其次安装node.js 新建hexo文件夹（这就是本地上博客所在的地方），在文件夹内使用git bash安装hexo ,命令npm install -g hexo（npm是随前面node.js一起安装的包管理工具），然后继续在hexo文件夹内部署hexo博客即可 然后按照步骤跟github链接上即可，在一系列部署之后我们每次只需要hexo clean清除一下缓存，之后hexo g -d就把网站部署到了github上。hexo g是将改动的在本地重新生成，hexo d是将生成的文件立即部署到网站 next主题更换hexo安装部署完成之后hexo文件夹内如图 public是每个我们hexo g之后的文件夹，也是我们deploy到github上的文件夹。总而言之是整个博客网站的html、css、js、images的渲染文件。 source是我们博客里面放各种文章以及博客跳转的页面也就是写博客的主要工作目录，e.g.下面这些建立的都在source文件夹里面。hexo new &#39;title&#39;新建文章，hexo new page &#39;page&#39;新建页面。 themes里面放的就是hexo的主题，最开始安装的时候有一个landscape的主题，对，就是你们localhost：4000看到的样子。 hexo有很多各种各样的主题，最终我选择了next，我们在themes文件夹下面直接git clone这个主题就行了，具体clone的链接点击next在github上面的项目然后复制链接即可。 在这里我们需要注意两个文件，hexo文件下的_config,yml文件通常在被称为站点配置文件。themes里面的next主题里面的_config.yml文件被称为主题配置文件。 一般与next主题自己有关的都是在主题配置文件里面设置，更改的布局及样式都是在next这个文件夹内的文件里面进行修改。 我们要做的唯一一件事情就是在站点配置文件下面theme后面改为next，这样就启动了next这个主题（.yml文件要注意空格）。 关于next主题的各项设置网上随便一搜一大把，大家唯一需要注意的是版本号，不同版本存在着一些细微的区别，但是大致相同。 在next里面layout这个文件夹里面的.swig文件是各种不同页面的布局，source文件则是页面的组件的css、image之类的。 祝大家享受搭建自己博客的过程，enjoy~关于博客的一些其他的内容我会在后续的文章里面写到，欢迎大家留言探讨~]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
</search>
